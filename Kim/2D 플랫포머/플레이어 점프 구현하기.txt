 public float jumpPower;
if (Input.GetButtonDown("Jump"))
        {
            rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);
        }
라고 해주면 된다.
그리고 중력을 따로 설정하는 방법은 Project setting에서 Physics 2D에서 Gravity값을 따로 설정해줄 수 있다.
근데 저걸 건드리지않고 객체만의 중력을 조절해주고으면 Gravity Scale의 값을 바꿔주면 된다.(Rigidbody)

이제 점프-착지 애니메이션을 설정해주자.
animation insepctor에서 loop를 해제해주고 그런 과정은 같지만,
고려해야할 부분이 하나 존재하는데 가만히 있다가 점프할 수도 있지만, 걷다가 점프할 수도 있다는 부분이다.
그래서 make transition에서 두 개를 추가해줘야한다.
->idle인 상태라면 걷지않는 상태이니까 
가만히 있다가 점프라면 걷지않는 상태+점프하는 상태 두 개를 조건으로 받는다.
->걷는 상태라면
걷는 상태+점프하는 상태 두 개를 조건으로 받는다.

이걸 구현하는 과정에서 '레이 캐스트'를 배워보도록하자.
오브젝트에 Ray를 쏴서 현재 상태를 알아보는 방식이다.
FixedUpdate부분에
Debug.DrawRay(rigid.position,Vector3.down,new Color(0,1,0));을 하고 실행하면 플레이어 아래에 연두색 줄이 있는것을 확인할 수 있다.

RaycastHit2D rayHit=Physics2D.Raycats(rigid.position,Vector3.down,1);
Ray를 쏴서 맞은 대상을 rayHit이라는 객체에 집어넣는다.
 if(rayHit.collider != null){
RayCastHit변수의 콜라이더로 검색 확인 가능하다.
            Debug.Log(rayHit.collider.name);//이러면 누가 맞았는지를 Console에 표시해준다.  
        }
이 상태에서 Inspector를 보면 Layer(Mask)라는 것이 있다.
LayerMask는 물리 효과를 구분하는 정수 값이라고 생각하면 된다.
이것을 쓰는 이유는 우리는 현재 바닥을 감지하기 위해서 Ray를 쏘는 것이라고 생각하면 된다.
그런데 Player의 hitbox가 바닥보다 더 넓어서 Player를 먼저 감지하게 된다.
이런 경우 즉, raycast 사용중 자신과 타겟사이에 오브젝트가 끼어들어도 계속 타겟에게 ray를 쏘고 싶은 경우
layermask를 사용한다.
우선 타겟대상에게 Layer를 설정해줘야한다.(객체의 Inspector 대상에게)
여기서 추가적으로 알아야 할 정보는 LayerMask는 32비트의 int형 변수이다.
ex) 3번레이어는 0000....100이렇게 표현된다고 생각하면된다.
->3번 레이어를 지정하기 위해서는 (1<<3) or 1<<LayerMask.NameToLayer("레이어 이름")으로 설정해주면 된다.
그래서 바닥의 레이어값을 임의의로 설정해주고
RaycastHit2D rayHit=Physics2D.Raycast(rigid.position,Vector3.down,1,LayerMask.GetMask("레이어 이름));이라고 해주면 

rayHit이라는 변수안에는 현재위치의 아래에서 1의 거리로 쏘고 '레이어 이름'에 반응하는 객체를 저장해준다.
(거리가 1인 이유는 우리는 현재'착지'를 가장하고 쓰고 있기때문이다.)

https://docs.unity3d.com/2023.2/Documentation/ScriptReference/Physics2D.Raycast.html
자세한 parameter정보는 여기

if(rayHit.collider!=null){
            if(rayHit.distacne <0.5f) //rayHit까지의 거리를 의미함.
            Debug.Log(rayHit.collider.name);
        }
anim.SetBool("IsJumping",false);라고 써주면 된다.

그러면 아주 쉽게 무한 점프도 방지할 수 있다.
 if (Input.GetButtonDown("Jump") && !anim.GetBool("IsJumping"))
        {
            rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);
            anim.SetBool("IsJumping",true);
        }
라고 고쳐주면 된다.

&& !anim.GetBool("IsJumping")를 추가해줬다.