3장
프로그래밍의 기초 용어
    1.변수
'변수' : 데이터를 메모리에 저장하는 장소 
'변수를 선언한다': 내가 이 메모리를 설정하고 쓰겠다.
그리고 선언할 때 메모리를 얼만큼 그리고 어떠한 정보를 넣을지 지정해줘야하는데
이것을 '자료형'이라고 부른다.
대표적으로 int(integer,정수), float(실수), String(문자열), bool(boolen,참/거짓)
+ 왜 float이 실수일까? float을 검색하면 둥둥 떠다니는~정도로 연상될 것이다.
float은 정해진 bit로 최대한 높은 수를 표현하기 위해 쓰는 방법이다.
그래서 여기서는 소수점이 왔다갔다 거리는데 이게 마치 물 위에서 떠다니는 것같다고 해서 float이라고 부르게 됐다.
변수를 선언하는 방법은 '자료형 변수명'으로 선언한다.
선언한뒤에는 '초기화한다'라는 과정을 거치는데
'변수명 = 초기화값'을 넣어주면 된다. 
변수의 선언과 초기화를 한번에 할 수 있는데 '자료형 변수명 = 초기화값'이라고 한번에 입력할 수도 있다.
(Ex) int le=5; float strength=15.5f; string player="나"; bool isFullLevel;이다.
각각 설명하자면 int는 정수라서 아무것도 붙이지 않아도 된다.
float은 숫자뒤에 얘가 실수라는걸 표현하는 f를 붙인다.
string은 얘가 문자열이라는걸 보여주기 위해 ""을 붙여주고
bool은 참/거짓이니까 true,false를 붙여주면 된다.(추가적으로 bool형에서 양수는 모두 참으로 취급된다.0은 false로 취급된다.)
그리고 ;은 마침표라고 생각하면 된다. 
이렇게 선언된 변수들은 Debug.log(변수)를 통해서 Console창에 띄워지게 된다.
    2.그룹형 변수
같은 자료형의 변수 여러개를 한번에 사용하는 경우에는 
2-1.배열
    string[] monsters={"악마","슬라임"}; 이런식으로 여러가지를 묶어서 쓸 수 있다.
그리고 사용하는 법은 monsters[0]이라고 하면 악마가 출력된다.
Debug.log(monsters[1]); 이라고하면 슬라임이 출력되는 것이다.
    int[] monsterLevel= new int[3];
이라고 하면 int형의 메모리 공간 3개가 생성되게 된다.
2-2. 리스트
    List<string> items=new List<string>();
여기서 <>안에 어떠한 자료형을 쓸 지 정해줘야 하는데 이것은 Genetic이라고 부른다. 
간단하게 설명하자면 내가 이 클래스를 나중에 사용할 때 어떠한 자료형을 사용할지 정하겠다 라는 의미라고 생각하면 된다.
이건 차후에 설명할 기회가 있다면 설명하겠다.
데이터를 넣는 방법은 items.Add("어쩌고");라고 넣어주면 된다.
그리고 출력방법은 배열과 동일하다.
리스트는 배열과 다르게 내부의 자료를 삭제할 수 있는데
items.Remove(0);이라고 하면 0번째 자료가 삭제된다.
리스트는 배열과 다르게 내부의 자료가 없어지면 각각 한칸씩 앞으로 땡겨지게 돼서 
1번째의 요소가 0번째 요소 자리에 들어가게 된다.
    3.연산자
3-1.사칙연산
우리가 현실에서 접하는 사칙연산은 +,-,*의 형태로 구현되어있고
나눗셈의 경우에는 /을 하면 몫만 %을 하면 나머지만 나오게 된다.
3-2.비교연산자
그리고 ==,<,>,<=,>=와 같은 비교연산자도 있고 결과는 bool형으로 나오게된다.
3-3.논리연산자
추가적으로 &&,||,! 와 같은 논리연산자도 존재한다.
3-4.삼항 연산자
마지막으로 삼항 연산자라는 것이 있는데 
조건 ? A:B 라고 하면 조건이 참이라면 A를 거짓이라면 B를 출력하게된다.
    4.keyword
우리가 코딩을 하다보면 어떠한 단어를 치면 색이 바뀌는 경우를 경험해봤을 것인데,
그것을 우리는 keyword라고 부른다. 키워드는 변수의 이름으로 지정할 수 없다.
    5.조건문
5-1.if 조건문
if (조건){ 로직} -> 조건이 만족하면 로직이 실행되게 된다.
else if (조건) {로직} ->위의 조건들이 아니면 해당 조건이 맞는지 확인하고 만족하면 실행된다.
else{} ->위의 조건들이 전부 다 아니라면 이게 실행되게 된다.
5-2. switch 문
switch(변수){
    case A:
        로직        ->변수의 값이 A라면 로직을 실행시켜라
        break;
    ....
    default:
        로직        ->변수의 값이 전부 다 아니라면 이 로직을 실행시켜라
        break;
}
switch문을 보면 break가 다 들어가 있음을 볼 수 있는데 break는 해당 반복문을 부수고 나온다고 생각하면 된다.
만약 break가 없다면 그 만족하는 조건부터 다음 break가 나올 때까지 실행하게 된다.
    6. 반복문
6-1. while문
while(조건){로직} ->조건이 맞으면 로직이 계속해서 실행된다. 조건이 맞지 않을때까지 실행된다.
그래서 보통 while문 안에 break문을 넣어주거나 조건에 넣은 값을 실행할 때마다 바꾸면서 조건에서 벗어나게 해준다.
6-2. for문
for(연산할 변수;조건;연산){로직}
얘도 조건이 맞으면 돌리게되는데
for(int count=0;count<10;count++){}라고 하자.
그러면 실행할 때마다 count의 값이 높아지게 되고 결론적으로 10번 실행하게 된다.

    조건에서 기준이 되는 수는 무조건 수가 아니라 변수로 바꿀 수도 있다.
예를 들어서 배열의 경우에는 배열명.Length라고 하면 배열의 길이가
            리스트의 경우엔 리스트.Count라고 하면 리스트의 길이가 반환돼서
count<배열명.Length or count<리스트.Count라고 하면서 반복문을 돌릴 수도 있다.
6-3. foreach문
얘는 위에서 언급한 그룹형 변수로 반복문을 돌리는데 최적화된 아이라고 생각하면 되는데
foreach(string monster in monsters){
    Debug.Log(monster)
}
라고 하면 monster에는 수가 아닌 monsters라는 배열/리스트에 존재하는 요소를 직접적으로 꺼내오게 돼서
monster[i]같은 구문을 지정해주지 않고 monster라고만 해도 그 배열/리스트에 존재하는 n번째(n=반복된 횟수)의 요소가 출력되게 된다.
    7.함수(method) (중요)
함수는 내가 어떠한 기능을 반복적으로 사용하는 경우 or 기능을 구현했는데 너무 길어져서 코드를 한눈에 보기 힘든경우에 사용하게 된다.
우리가 코드를 실행할 때 만나는 void Start(){} 라는 애가 함수의 형태이다.
반환형(자료형) 함수이름 (매개변수(parameter)) {로직}으로 구성되어 있다.
여기서 반환형은 이 함수가 종료되고나서 값을 반환하는 경우 어떠한 자료형으로 그 값을 반환할 것인지를 보여준다.
    근데, 여기서 조심해야 할 것이 함수 내부에 들어가서 다른 함수에 존재하는 변수를 부르는 것이 불가능한데 그 이유는
한 함수가 실행되면 그 내부에 있는 변수들이 활성화된다고 이해하면 된다. 즉, 그 함수가 종료되는 순간 그 변수에게 할당된 메모리는 삭제되고
따라서 메모리가 삭제된 변수를 데려올 수는 없다. 
이렇게 함수 내부에 선언된 변수를 지역변수라고 부른다.
대신 함수 외부에서 선언된 변수를 우리는 전역변수라고 부른다.
    8.클래스(class) (중요중요)
하나의 사물(오브젝트)와 대응하는 로직이다.
class 클래스명{로직}으로 선언된다. 유니티에서는 CS Script를 하나 만들 때 기본적으로 class라고 박고 시작하기 때문에
Unity에서는 클래스는 하나의 사물을 칭한다라고 이해하면 될거같다.
클래스는 클래스명 변수명 = new 클래스명(); 으로 선언되고
        변수명.클래스 내부 변수 = 초기화 or 변수명.클래스 내부 함수(parameter)로 쓸 수 있다.
저기서 좀 더 깊게 설명하자면
첫번째 클래스명은 내가 선언한 or 가져온 클래스의 개념을 가져오겠다라는 의미다.
그리고 두번째 클래스명은 내가 가져온 개념을 힙영역에서 메모리 공간을 지정한 다음 거기에 object를 만들고
이 메모리공간에 접근할 수 있는 변수(instance,객체)를 선언한다는 의미로
앞의 클래스명과 뒤의 클래스명의 의미가 다르다.
클래스에는 상속이라는 개념이 존재하는데 또 다른 클래스에 존재하는 변수,함수를 계속해서 계승하여 쓰고 싶을 때 사용한다.
class 클래스명:상속받을 클래스명{로직}으로 선언해주면 되고, 그러면 이 클래스로 만든 객체는
이 클래스에 존재하는 변수/함수+ 자신의 윗 계층의 변수/함수를 사용할 수 있다.
   접근자라는 개념이 있는데 각각 private, public, protected가 존재다.
public은 해당 변수/함수에 어디서든 누구든 접근이 가능한것이다.
private은 해당 변수/함수는 해당 변수/함수 안에서만 접근이 가능한것이고
protected는 해당 변수/함수는 해당 변수/함수와 계승관계에 있는 애들만 접근이 가능한것이다.
모든 변수/함수/클래스 선언시 앞에 붙일 수 있고 안붙이고 쓰면 default값인 public으로 설정된다.