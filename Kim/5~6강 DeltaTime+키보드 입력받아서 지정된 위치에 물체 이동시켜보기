Unity에서 마우스,키보드의 입력은 다 input프로퍼티가 받는다.
일단 키(마우스,키보드 포함)을 누르는 상태에는 세 가지가 있다.
1. 누른다.(Down) 2.누르고 있다.(Stay) 3. 뗀다.(Up)
Input.anyKeyDown을 하면 어떤 키를 누르든 반응하게 된다.
Input.anyKey를 하면 어떤 키를 지속적으로 누르고 있으면 반응한다.
Input.GetKeyDown(KeyCode.Return)에서 GetKeyDown은 '키보드'에만 반응한다.
Down이니까 누를 때 한번만 입력한다.
KeyCode는 키보드에서 입력되는 신호들을 갖고있는 클래스다.
KeyCode.Return은 키보드중에서 Enter를 의미한다.
Input.GetKey(KeyCode.LeftArrow)의 경우에는 '키보드'중 왼쪽 화살표를 누른 상태를 말한다.
Input.GetKeyUp(KeyCode.RightArrow)는 자동으로 해석이 될거라고 본다.
마우스의 경우에는 'GetMouseButton'으로 구성되고 Down,Up 둘 다 있다.
GetMouseButton(0 or 1)을 받는데 0은 마우스 왼쪽, 1은 마우스 우클릭이다.
이 키에 대한 설정을 잘보고싶다면 Edit->Project Settings에서 Input을 검색해보면 해당 요소에 대응하는 숫자를 보여준다.
그러면 GetButton("해당 기능의 이름"or 값)으로 해서 받아줄 수도 있다.(당연히 Down,Up과 반응한다.)

    그러면 이제 가로/세로로 이동 시켜보자. 똑같이 Project Setting에 가면 기본적으로 가로 이동은 Horizontal라고 선언되어있다.
따라서 Input.GetButton("Horizontal")이라고 하고 좌우(a,d or <-,->)를 누르면 true가 반환된다.
그리고 얼마나 이동했는지를 보고싶으면 Input.GetAxis("Horizontal")이라고 표현하면 된다. 
기본적으로 로그 함수이기때문에 <-,->이 각각 -1,1에 수렴하는 값으로 표현된다.(Down상태일때)
근데 이런 수렴(가중치)로서 표현되는거 필요없고 난 그냥 방향만 표현하고 싶다고 하면,
GetAxis가 아니라 GetAxisRaw라고 해주면 -1,1로 표현된다.
세로(종) 이동의 경우에는 Horizontal을 Vertical로 바꿔서 표현해주면 된다.
그러면 이제 오브젝트를 직접 이동시켜보자.
오브젝트를 생성한 경우 어떠한 오브젝트든 Transform이라는 기본 Component를 받게 된다.
얘는 클래스이고 transform이라는 instance로서 대표된다.
그리고 transform.Translate(Vector3)라고 하면
해당 instance의 좌표를 Translate하는데 Vector3의 값으로 한다.
여기서 Vector3인 이유는 3차원이기 때문이고, Vector3 vec= new Vector3(0,0,0)으로 선언해줄 수 있다.
따라서 transform.Translate(vec)으로 해주면 이동하지 않는다는 사실을 알 수 있다.
따라서 저 괄호 안에 Vector3의 값을 바꿔주는 식으로 물체의 이동을 표현할 수 있다.
Vector3 vec= new Vector3(Input.GetAxis("Horizontal"),Input.GetAxis("Vertical"),0)
라고 Update영역에 입력해주면 된다.

    이제 목표 지점으로 오브젝트를 옮겨보자. 일단 대부분의 이동은 Vector3 클래스에서 함수로 제공해준다.
1. Vector3에서 MoveTowards라는 함수를 제공하는데 여기에 parameter(매개변수)로 (현재위치,목표,속도)를 입력해주면 등속이동해준다.
현재위치는 transform.position, 목표 위치는 따로 Vector3를 이용해서 instance를 생성해주면 될거같고, 속도는 직접 지정해주거나 [SerializeField]로 입력받아도 될거같다.
2. Vector3에서 SmoothDamp라는 함수를 제공하는데 부드러운 감속 이동, parameter는 (현재위치,목표위치,참조 속도,속도)로 구성
얘는 마지막 parameter에 반비례해서 속도가 증가한다.
여기서 ref는 참조 접근자로서 실시간으로 바뀌는 값을 적용할 수 있다.
근데 여기서 ref의 값이 실시간으로 바뀌게 되면 target의 위치 + 참조하는 속도*가는데 걸리는 시간만큼 좌표가 바뀌기 때문에 사실상 목표지점에 도착한다는 부분에서 의미가 크게 없다
따라서 목표지점으로 도달하는 SmoothDamp에서 ref값은 zero다.
3.Lerp : 선형 보간 운동인데 그냥 SmoothDamp보다 감속시간이 길다고 이해하면 된다.
        transform.position = Vector3.Lerp(transform.position,target,0.05f);
        //마지막 매개변수에 비례해서 속도가 증가한다.
4.SLerp 구면 선형 보간 -> 호를 그리면서 움직인다.
        transform.position = Vector3.Slerp(transform.position,target,0.05f);


+DeltaTime이라는게 있다. 
사용 방법은 
Translate의 경우에는 벡터에 곱해주면된다.
(Ex) transform.Translate(Vec*Time.deltaTime);
Vector함수에는 시간 매개변수에 곱해주면 된다.
(Ex) Vector3.Lerp(Vec1,Vec2,T*Time.deltaTime)
Time.deltaTime은 이전 프레임의 완료까지 걸린 시간이다.
컴퓨터의 성능에 따라서 이전 프레임의 완료까지 걸리는 시간이 다를 것이다.
근데 성능에 따라서 같은 게임을 다른 속도로 즐기는 것은 매우 불공평하다.(특히 온라인일수록)
deltaTime의 값은 성능과 반비례한데
그 이유는 당연히 성능이 빠르면 빨리 끝낼 것이고 그러면 더 많은 지연시간을 곱해줘야 상대적으로 성능이 안좋은 PC와 프레임 속도가 맞기때문이다.